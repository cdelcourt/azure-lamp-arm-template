{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "region": {
      "type": "string"
    },
    "adminUsername": {
      "type": "string"
    },
    "sshKeyData": {
      "type": "string"
    },
    "namespace": {
      "type": "string"
    },
    "vmbasename": {
      "type": "string"
    },
    "osSettings": {
      "type": "object"
    },
    "vmSize": {
      "type": "string"
    },
    "dnsname": {
      "type": "string"
    },
    "dbNodes": {
      "type": "int"
    },
    "subnet": {
      "type": "object"
    },
    "staticIp": {
      "type": "string"
    },
    "addressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
    },
    "publicIPAddressType": {
      "type": "string"
    }
  },
  "variables": {
    "subnetRef": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('subnet').vnet), '/subnets/', parameters('subnet').name)]",
	  "apiVersion": "2015-06-15",
	  "storageAccountName": "[concat(uniquestring(resourceGroup().id), '-', 'parameters('namespace')', '-storage')]",
    "securityGroupName": "[concat(parameters('namespace'), parameters('vmbasename'), 'nsg')]",
    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
    "lbName": "[concat(parameters('namespace'), concat(parameters('vmbasename'), 'lb'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
    "loadBalancerPublicIP": "[concat(parameters('namespace'), concat(parameters('vmbasename'), 'lbip'))]",
    "lbBackendPool": "[concat(parameters('namespace'), concat(parameters('vmbasename'), 'pool'))]",
    "lbPoolID": "[concat(variables('lbID'), '/backendAddressPools/', variables('lbBackendPool'))]",
    "lbProbeID": "[concat(variables('lbID'),'/probes/tcpProbe')]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses', variables('loadBalancerPublicIP'))]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/LoadBalancerFrontEnd')]"
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('securityGroupName')]",
      "location": "[parameters('region')]",
      "properties": {
        "securityRules": [
          {
            "name": "SSH",
            "properties": {
              "description": "Allows SSH traffic",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "HTTP",
            "properties": {
              "description": "Allows HTTP traffic",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[concat(parameters('namespace'), parameters('vmbasename'), 'set')]",
      "location": "[parameters('region')]",
      "properties": {}
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('namespace'), concat(parameters('vmbasename'), 'nic'))]",
      "location": "[parameters('region')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[parameters('staticIp')]",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('securityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('namespace'), parameters('vmbasename'), 'vm')]",
      "location": "[parameters('region')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', concat(parameters('namespace'), concat(parameters('vmbasename'), 'nic')))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('namespace'), concat(parameters('vmbasename'), 'vm'))]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": "[parameters('osSettings').imageReference]",
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', variables('storageAccountName'),'.blob.core.windows.net/vhds/', parameters('vmbasename'), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('namespace'), concat(parameters('vmbasename'), 'nic')))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('namespace'), parameters('vmbasename'), 'vm', '/webInstall')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[parameters('region')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', concat(parameters('namespace'), concat(parameters('vmbasename'), 'vm')))]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4",
        "settings": {
		      "autoUpgradeMinorVersion": true,
          "fileUris": "[parameters('osSettings').scripts]",
          "commandToExecute": "[concat('bash install-web.sh ', '10.0.0.10')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "name": "[variables('lbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[parameters('region')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', concat(parameters('namespace'), concat(parameters('vmbasename'), 'lbip')))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('lbBackendPool')]",
          }
        ],
        "inboundNatRules": [
          {
            "name": "Web",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('namespace'), concat(parameters('vmbasename'), 'lbip'))]",
      "location": "[parameters('region')]",
      "properties": {
        "publicIPAllocationMethod": "[parameters('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('lbName')]"
        }
      }
    }
  ],
  "outputs": {}
}
